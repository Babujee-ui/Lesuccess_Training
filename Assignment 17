Create a Binary Tree and Print the level order traversal of a binary tree.
import java.util.*;
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data=data;
        this.left=null;
        this.right=null;
    }
}
public class Level_Order {
    static Node BuildTree(int[] arr){
        if (arr.length==0 || arr[0]==-1){
            return null;
        }
        Node root=new Node(arr[0]);
        Queue<Node> q=new LinkedList<>();
        q.offer(root);
        int i=1;
        while(!q.isEmpty() && i<arr.length){
            Node cur=q.poll();
            if(arr[i]!=-1){
                cur.left=new Node(arr[i]);
                q.offer(cur.left);
            }
            i++;
            if(arr[i]!=-1 && i<arr.length){
                cur.right=new Node(arr[i]);
                q.offer(cur.right); 
            }
            i++;
        }
        return root;
    }
    static void LevelOrderTraversal(Node root){
        if (root==null){
            return;
        }        Queue<Node> q=new LinkedList<>();
        q.offer(root);
        int i=1;
        System.out.print(root.data+"--> ");
        while(!q.isEmpty() ){
            Node cur=q.poll();
            if(cur.left!=null){
                System.out.print(cur.left.data+"--> ");
                q.offer(cur.left);
            }
            if(cur.right!=null){
                System.out.print(cur.right.data+"--> ");
                q.offer(cur.right);
            }
        }
    }

    static void inorder(Node root){
        if(root!=null){
            inorder(root.left);
            System.out.print(root.data+"--> ");
            inorder(root.right);
        }
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the num of element");
        int n=sc.nextInt();
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }

        Node root=BuildTree(arr);
        inorder(root);
        System.out.println();
        LevelOrderTraversal(root);
    }
}

Count the number of leaf nodes in a binary tree.
class Solution {
    int countLeaves(Node node) {
        // Your code
        int[] a=new int[1];
        helper(node,a);
        return a[0];
    }
    static void helper(Node node,int[] count){
        if(isLeaf(node)){
            count[0]++;
            return;
        }
        if(node.left!=null){
            helper(node.left,count);
        }
        if(node.right!=null){
            helper(node.right,count);
        }
    }
    static boolean isLeaf(Node node){
        return node.left==null && node.right==null;
    }
}



Find the height (or depth) of a binary tree.
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;

        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        return Math.max(leftDepth, rightDepth) + 1;
    }
}


